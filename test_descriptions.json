{
  "week_1": {
    "title": "Week 1: The Authentication & Core Models Foundation",
    "overview": "By the end of this week, students will have built a secure and functional authentication system for a banking application. This includes a robust backend API for user registration and login, a reactive frontend for user interaction, and the foundational database models for accounts and transactions.",
    "prerequisites": [
      "Repository name must be <strong>banking_application</strong>.",
      "Root directory must contain <code>frontend/</code>, <code>backend/</code>, and a non-empty <code>README.md</code>."
    ],
    "stages": [
      "<strong>Project Scaffolding & Custom User Model:</strong> Initialize Django and Next.js projects. Create a custom user model in Django using email as the unique identifier.",
      "<strong>User Registration & Login API Endpoints:</strong> Build secure API endpoints for user registration and token-based login using Django REST Framework.",
      "<strong>Frontend Implementation:</strong> Develop registration/login forms in Next.js, manage global authentication state with React Context, and protect dashboard routes from unauthenticated access.",
      "<strong>Core Banking Models & Protected API Endpoints:</strong> Define <code>Account</code> and <code>Transaction</code> models in Django and create a secure API endpoint that allows a logged-in user to view only their own account information."
    ]
  },
  "week_2": {
    "title": "Week 2: Core Banking Features & API Interaction",
    "overview": "This week, students will build the core functionalities of the banking application. They will create API endpoints for managing accounts and performing transactions, and then build the corresponding frontend components to interact with these endpoints. By the end of this week, users will be able to view their account details, see a list of their transactions, and transfer money between their own accounts.",
    "prerequisites": [
      "Completed all tasks from Week 1.",
      "Backend and Frontend servers run without errors."
    ],
    "stages": [
      "<strong>Account & Transaction List APIs:</strong> Create API endpoints to fetch account lists and the transaction history for a specific account, ensuring users can only access their own data.",
      "<strong>Frontend Dashboard Display:</strong> Build the main dashboard UI in Next.js to display the user's accounts and their associated transaction history, fetching data from the new APIs.",
      "<strong>Transfer Money API & Frontend Form:</strong> Implement the backend logic (with database transactions) and frontend UI for securely transferring money between a user's own accounts.",
      "<strong>User Profile API & View:</strong> Create a simple profile page where a user can view and update their first and last name, with changes reflected in the database."
    ]
  }
}
